
import java.math.BigInteger;
        import java.util.Scanner;

public class karrr {
    public static BigInteger customRecursiveMultiply(BigInteger x, BigInteger y) {
        if (x.compareTo(BigInteger.TEN) < 0 || y.compareTo(BigInteger.TEN) < 0) {
            return x.multiply(y);
        }
        int length = Math.max(x.toString().length(), y.toString().length());
        BigInteger power = BigInteger.TEN.pow(length / 2);
        BigInteger ar = x.mod(power);
        BigInteger al = x.divide(power);
        BigInteger br = y.mod(power);
        BigInteger bl = y.divide(power);
        BigInteger albl = customRecursiveMultiply(al, bl);
        BigInteger arbr = customRecursiveMultiply(ar, br);
        BigInteger middle = customRecursiveMultiply(al.add(ar), bl.add(br)).subtract(albl)
                .subtract(arbr);
        return albl.multiply(power.pow(2)).add(middle.multiply(power)).add(arbr);
    }

    public static void main(String[] args) {
        Scanner scanner = new Scanner(System.in);
        System.out.print("Enter the number: ");
        BigInteger x = scanner.nextBigInteger();
        BigInteger y = x;
        BigInteger result = customRecursiveMultiply(x, y);
        System.out.println("The result is: " + result);
        scanner.close();
    }
}

---------------------------------------------------------------------------------------------



import java.util.*;

class Job {
    int id, profit, deadline;
    Job(int x, int y, int z) {
        this.id = x;
        this.deadline = y;
        this.profit = z;
    }
}

class solvee {
    // return an array of size 2 having the 0th element equal to the count
    // and 1st element equal to the maximum profit
    void JobScheduling(Job arr[], int n) {
        Arrays.sort(arr, (a, b) -> (b.profit - a.profit));

        int maxi = 0;
        for (int i = 0; i < n; i++) {
            if (arr[i].deadline > maxi) {
                maxi = arr[i].deadline;
            }
        }

        int anss[]=new int[maxi+1];
        for (int i = 0; i <= maxi; i++) {
            anss[i]=-1;
        }
        int result[] = new int[maxi + 1];

        for (int i = 1; i <= maxi; i++) {
            result[i] = -1;
        }

        int countJobs = 0, jobProfit = 0;

        for (int i = 0; i < n; i++) {

            for (int j = arr[i].deadline; j > 0; j--) {

                // Free slot found
                if (result[j] == -1) {
                    result[j] = i;
                    countJobs++;
                    anss[j]=arr[i].id;
                    jobProfit += arr[i].profit;
                    break;
                }
            }
        }

        int ans[] = new int[2];
        ans[0] = countJobs;
        ans[1] = jobProfit;

        System.out.println("total jobs"+ans[0]);
        System.out.println("profit "+ans[1]);


        System.out.println("sequence of jobs");
        System.out.println();
        for(int i=0;i<anss.length;i++){
            if(anss[i]!=-1)
            {


                System.out.print(anss[i]+" ");
            }
        }

    }
}
public class jobans {
    public static void main(String[] args){

        //size of array
        Scanner sc=new Scanner(System.in);
        System.out.println("enter jobs: ");
        int n=sc.nextInt();
        Job[] arr = new Job[n];

        for(int i=0;i<arr.length;i++){
            System.out.print("enter id: ");
            int id=sc.nextInt();

            System.out.print("enter deadline: ");
            int deadline=sc.nextInt();

            System.out.print("enter profit: ");
            int profit=sc.nextInt();

            arr[i]=new Job(id, deadline, profit);
        }
        //arr[0] = new Job(1, 4, 20);
        //arr[1] = new Job(2, 1, 10);
        //arr[2] = new Job(3, 2, 40);88
        //arr[3] = new Job(4, 2, 30);

        solvee ob = new solvee();

        //function call
        ob.JobScheduling(arr, n);
        // System.out.println(res[0] + " " + res[1]);

    }
}
-------------------------------------------------------------------------------------------





import java.util.Scanner;
import java.util.*;

public class flowd {

    final static int INF = 99999;
    static void solutoin(int[][] dist,int V)
    {
        for(int k=0;k<V;k++){
            for(int i=0;i<V;i++ ){
                for (int j = 0; j < V; j++) {
                   dist[i][j]=Math.min(dist[i][j],dist[i][k]+dist[k][j]);
                }
            }
        }
    }
    public static void main(String[] args)
    {
        Scanner sc = new Scanner(System.in);
        System.out.print("Enter the no of offices: ");
        int V = sc.nextInt();

        int dist[][] = new int[V][V];

        System.out.println("Enter the cost of connection between offices(Enter 99999 if no cost is known): ");

        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {

                if(i == j) {
                    continue;
                }
                System.out.print("Enter the cost to leash lines between office "+(i+1)+" and "+(j+1)+" :");
                dist[i][j] =sc.nextInt();
                System.out.println(" ");
            }
        }


        solutoin(dist, V);

        for (int i = 0; i < V; i++) {
            for (int j = 0; j < V; j++) {

                if(i == j) {
                    continue;
                }
                if(dist[i][j] != INF){
                    System.out.println("The cost to leash lines between office "+(i+1)+" and "+(j+1)+" : " + dist[i][j]);
                }

            }
        }

    }
}

-------------------------------------------------------------------------------------------


import java.util.Scanner;

public class knight3 {
    public knight3() {
    }

    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("enter for chess board: ");
        int n = sc.nextInt();
        System.out.println("enter starting point row");
        int r = sc.nextInt();
        System.out.println("enter starting point col");
        int c = sc.nextInt();
        int[][] chess = new int[n][n];
        boolean[] found = new boolean[]{false};
        printknighttour(chess, r, c, 1, found);
        if (!found[0]) {
            System.out.println("No solution is possible.");
        }

    }

    public static void printknighttour(int[][] chess, int r, int c, int move, boolean[] found) {
        if (!found[0]) {
            if (r >= 0 && c >= 0 && r < chess.length && c < chess[0].length && chess[r][c] <= 0) {
                if (move == chess.length * chess[0].length) {
                    chess[r][c] = move;
                    displayboard(chess);
                    chess[r][c] = 0;
                    found[0] = true;
                } else {
                    chess[r][c] = move;
                    printknighttour(chess, r - 2, c + 1, move + 1, found);
                    printknighttour(chess, r - 1, c + 2, move + 1, found);
                    printknighttour(chess, r + 1, c + 2, move + 1, found);
                    printknighttour(chess, r + 2, c + 1, move + 1, found);
                    printknighttour(chess, r + 2, c - 1, move + 1, found);
                    printknighttour(chess, r + 1, c - 2, move + 1, found);
                    printknighttour(chess, r - 1, c - 2, move + 1, found);
                    printknighttour(chess, r - 2, c - 1, move + 1, found);
                    chess[r][c] = 0;
                }
            }
        }
    }

    public static void displayboard(int[][] chess) {
        for(int i = 0; i < chess.length; ++i) {
            for(int j = 0; j < chess[0].length; ++j) {
                System.out.print(chess[i][j] + " ");
            }

            System.out.println();
        }

        System.out.println();
    }
}
-------------------------------------------------------------------------------------------






import java.util.*;

public class dikstra1 {
    public static class Edge {
        int src;
        int dest;
        int wt;

        public Edge(int s, int d, int wt) {
            this.src = s;
            this.dest = d;
            this.wt = wt;
        }
    }

    public static void createGraph(ArrayList<Edge> graph[]) {
        for (int i = 0; i < graph.length; i++) {
            graph[i] = new ArrayList<>();
        }
        graph[0].add(new Edge(0, 1, 2));
        graph[0].add(new Edge(0, 2, 4));

        graph[1].add(new Edge(1, 2, 1));
        graph[1].add(new Edge(1, 3, 7));

        graph[2].add(new Edge(2, 4, 3));

        graph[3].add(new Edge(3, 5, 1));

        graph[4].add(new Edge(4, 3, 2));
        graph[4].add(new Edge(4, 5, 5));

    }

    static class Pair implements Comparable<Pair> {
        int n;
        int path;

        Pair(int n, int path) {
            this.n = n;
            this.path = path;
        }

        @Override
        public int compareTo(Pair p2) {
            return this.path = p2.path;
        }

    }

    public static void dijkstrasAlgo(ArrayList<Edge> graph[], int src) {
        int dist[] = new int[graph.length];
        boolean vis[] = new boolean[graph.length];
        for (int i = 0; i < graph.length; i++) {
            if (i != src) {
                dist[i] = Integer.MAX_VALUE;
            }
        }
        PriorityQueue<Pair> pq = new PriorityQueue<>();
        pq.add(new Pair(src, 0));
        while (!pq.isEmpty()) {
            Pair curr = pq.remove();
            if (!vis[curr.n]) {
                vis[curr.n] = true;
                for (int i = 0; i < graph[curr.n].size(); i++) {
                    Edge e = graph[curr.n].get(i);
                    int u = e.src;
                    int v = e.dest;
                    int wt = e.wt;

                    if (dist[u] + wt < dist[v]) {
                        dist[v] = dist[u] + wt;
                        pq.add(new Pair(v, dist[v]));

                    }
                }
            }
        }

        for (int i = 0; i < dist.length; i++) {
            System.out.println("Shortest distance from 0 to " + i + " is: " + dist[i] + " ");
        }
        System.out.println();
    }

    public static void main(String args[]) {
        int v = 6;
        ArrayList<Edge> graph[] = new ArrayList[v];
        createGraph(graph);
        int src = 0;
        dijkstrasAlgo(graph, src);

    }

}

-------------------------------------------------------------------------------------------




        import java.util.*;

public class jobassignmet {

    public static class Node implements Comparable<Node>{

        int cost;
        int level;
        int assigned[];
        boolean [] visited;

        Node(int cost, int level, int assigned[], boolean visited[]){
            this.cost = cost;
            this.level = level;
            this.assigned= assigned.clone();
            this.visited = visited.clone();
        }


        public int compareTo(Node n) {
            return this.cost - n.cost;
        }

    }
    public static void main(String[] args) {
        Scanner sc = new Scanner(System.in);
        System.out.println("Enter the size of matrix :");
        int n =sc.nextInt();

        int mat[][] = new int[n][n];
        System.out.println("Enter the matrix :");
        for(int i=0; i<n; i++) {
            for(int j=0; j<n; j++) {
                mat[i][j]= sc.nextInt();
            }
        }

        int mincost = findMinCost(mat);
        System.out.println(mincost);
    }

    private static int findMinCost(int[][] mat) {
        int n= mat.length;
        int assigned[] = new int[n];

        boolean visited[] = new boolean[n];

        Arrays.fill(assigned, -1);

        PriorityQueue<Node> pq = new PriorityQueue<Node>();
        pq.add(new Node(0,-1, assigned, visited));

        while(!pq.isEmpty()) {
            Node min = pq.poll();
            int i = min.level+1;

            if(i == n ) {
                printassignment(min, mat);
                return min.cost;
            }

            for(int j=0; j<n; j++) {
                if(!min.visited[j]) {
                    int newassigned[] = min.assigned.clone();
                    boolean newvisited[] = min.visited.clone();
                    newassigned[i]= j;
                    newvisited[j]= true;
                    Node child = new Node(min.cost + mat[i][j], i, newassigned, newvisited);
                    pq.add(child);
                }
            }
        }
        return -1;
    }

    private static void printassignment(Node min, int[][] mat) {
        for(int i = 0; i<min.assigned.length; i++) {
            int club = min.assigned[i];
            int cost = mat[i][club];
            System.out.println("student"+(i+1)+" is assined to club " + club + " with cost of " + cost);
        }

    }
}




Enter the size of matrix :
4
Enter the matrix :
9 2 7 8 
6 4 3 7 
5 8 1 8 
7 6 2 4 
student1 is assined to club 1 with cost of 2
student2 is assined to club 0 with cost of 6
student3 is assined to club 2 with cost of 1
student4 is assined to club 3 with cost of 4
13















